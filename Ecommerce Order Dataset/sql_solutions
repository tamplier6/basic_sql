Проект состоит из 15 заданий на составление запросов к БД (PostgreSQL) на основе датасета Ecommerce Order & Supply Chain Dataset с Kaggle (https://www.kaggle.com/datasets/bytadit/ecommerce-order-dataset/data)

1. Вывести все уникальные способы оплаты, которые использовали клиенты.

SELECT DISTINCT payment_type
FROM payments;

2. Найти количество заказов в каждом статусе (delivered, cancelled и т.д.).

SELECT order_status, COUNT(*) AS total_orders
FROM orders
GROUP BY order_status
ORDER BY total_orders DESC;

3. Получить список городов с количеством клиентов в каждом городе.

SELECT customer_city, COUNT(*) AS total_customers
FROM customers
GROUP BY customer_city
ORDER BY total_customers DESC;

4. Определить топ-5 самых дорогих категорий товаров по средней цене.

SELECT p.product_category_name,
       ROUND(AVG(oi.price), 2) AS avg_price
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category_name
ORDER BY avg_price DESC
LIMIT 5;

5. Вывести количество уникальных продавцов (seller_id) в каждом штате клиентов.

SELECT c.customer_state, COUNT(DISTINCT oi.seller_id) AS unique_sellers
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_state
ORDER BY unique_sellers DESC;

6. Для каждого клиента найти дату его первого заказа.

SELECT customer_id, MIN(order_purchase_timestamp) AS first_order_date
FROM orders
GROUP BY customer_id;

7. Посчитать количество заказов, которые были доставлены позже, чем указано в order_estimated_delivery_date.

SELECT COUNT(*) AS late_deliveries
FROM orders
WHERE order_delivered_timestamp > order_estimated_delivery_date;

8. Найти среднее время доставки (разница между заказом и доставкой) в днях.

SELECT ROUND(AVG(EXTRACT(EPOCH FROM (order_delivered_timestamp - order_purchase_timestamp)) / 86400), 2) AS avg_delivery_days
FROM orders
WHERE order_delivered_timestamp IS NOT NULL;

9. Для каждого штата клиентов найти средний чек заказа.

SELECT c.customer_state,
       ROUND(AVG(order_total), 2) AS avg_order_value
FROM (
    SELECT o.order_id, o.customer_id,
           SUM(oi.price + oi.shipping_charges) AS order_total
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.order_id, o.customer_id
) sub
JOIN customers c ON sub.customer_id = c.customer_id
GROUP BY c.customer_state
ORDER BY avg_order_value DESC;

10. Найти топ-3 продукта, которые чаще всего покупали в рассрочку (installments > 1).

SELECT oi.product_id, COUNT(*) AS installment_orders
FROM order_items oi
JOIN payments p ON oi.order_id = p.order_id
WHERE p.payment_installments > 1
GROUP BY oi.product_id
ORDER BY installment_orders DESC
LIMIT 3;

11. Определить, какая категория товаров принесла наибольшую выручку.

SELECT p.product_category_name,
       SUM(oi.price + oi.shipping_charges) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category_name
ORDER BY total_revenue DESC
LIMIT 1;

12. Найти клиентов, у которых разница между первым и последним заказом больше 1 года.

SELECT customer_id,
       MIN(order_purchase_timestamp) AS first_order,
       MAX(order_purchase_timestamp) AS last_order
FROM orders
GROUP BY customer_id
HAVING MAX(order_purchase_timestamp) - MIN(order_purchase_timestamp) > INTERVAL '1 year';

13. Для каждого месяца посчитать количество новых клиентов (тех, кто сделал первый заказ в этом месяце).

SELECT DATE_TRUNC('month', first_order_date) AS month,
       COUNT(*) AS new_customers
FROM (
    SELECT customer_id, MIN(order_purchase_timestamp) AS first_order_date
    FROM orders
    GROUP BY customer_id
) sub
GROUP BY month
ORDER BY month;

14. Используя оконные функции: для каждого клиента показать его заказы и позицию заказа по времени (1-й, 2-й, 3-й…).

SELECT customer_id, order_id, order_purchase_timestamp,
       ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_purchase_timestamp) AS order_number
FROM orders
ORDER BY customer_id, order_number;

15. Определить топ-5 клиентов с наибольшим ростом среднего чека между их первым и последним заказом.

WITH customer_orders AS (
    SELECT o.customer_id, o.order_id,
           SUM(oi.price + oi.shipping_charges) AS order_total,
           ROW_NUMBER() OVER (PARTITION BY o.customer_id ORDER BY o.order_purchase_timestamp ASC) AS first_order,
           ROW_NUMBER() OVER (PARTITION BY o.customer_id ORDER BY o.order_purchase_timestamp DESC) AS last_order
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.customer_id, o.order_id, o.order_purchase_timestamp
)
SELECT customer_id,
       MAX(CASE WHEN first_order = 1 THEN order_total END) AS first_order_value,
       MAX(CASE WHEN last_order = 1 THEN order_total END) AS last_order_value,
       (MAX(CASE WHEN last_order = 1 THEN order_total END) -
        MAX(CASE WHEN first_order = 1 THEN order_total END)) AS growth
FROM customer_orders
GROUP BY customer_id
ORDER BY growth DESC
LIMIT 5;
